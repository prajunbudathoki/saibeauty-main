// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  phone         String

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Location {
  id                  String   @id @default(uuid())
  name                String
  address             String
  city                String
  phone               String
  email               String?
  description         String?
  image               String?
  opening_time        String
  closing_time        String
  is_open_on_weekends Boolean
  google_maps_url     String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  services                 LocationService[]
  staff                    Staff[]
  appointments             Appointment[]
  StaffSchedule            StaffSchedule[]
  StaffSpecialAvailability StaffSpecialAvailability[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  created_at  DateTime @default(now())
  index       Int      @default(0)

  services Service[]
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  duration    Int?
  image       String?
  category_id String
  created_at  DateTime @default(now())
  index       Int

  category         Category          @relation(fields: [category_id], references: [id])
  locationServices LocationService[]
}

model LocationService {
  id          String   @id @default(uuid())
  location_id String
  service_id  String
  price       Float?
  created_at  DateTime @default(now())

  location            Location             @relation(fields: [location_id], references: [id])
  service             Service              @relation(fields: [service_id], references: [id])
  appointmentServices AppointmentService[]
}

model Testimonial {
  id          String   @id @default(uuid())
  name        String
  designation String?
  rating      Int
  review      String
  image       String?
  created_at  DateTime @default(now())
}

model GalleryItem {
  id          String   @id @default(uuid())
  title       String
  description String?
  image       String?
  created_at  DateTime @default(now())
}

model Contact {
  id         String   @id @default(uuid())
  name       String
  email      String
  phone      String?
  message    String
  created_at DateTime @default(now())
}

model Staff {
  id                       String   @id @default(uuid())
  location_id              String
  name                     String
  role                     String
  bio                      String?
  image                    String?
  created_at               DateTime @default(now())
  is_available_for_booking Boolean
  index                    Int
  facebook_url             String?
  instagram_url            String?
  twitter_url              String?

  location                 Location                   @relation(fields: [location_id], references: [id])
  appointments             Appointment[]
  StaffSchedule            StaffSchedule[]
  StaffSpecialAvailability StaffSpecialAvailability[]
}

model Appointment {
  id             String            @id @default(uuid())
  customer_id    String?
  location_id    String
  staff_id       String?
  start_time     DateTime
  end_time       DateTime
  status         AppointmentStatus
  total_price    Float
  customer_name  String?
  customer_email String?
  customer_phone String?
  notes          String?
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  rating         Int?
  review         String?

  location Location             @relation(fields: [location_id], references: [id])
  staff    Staff?               @relation(fields: [staff_id], references: [id])
  services AppointmentService[]
}

model AppointmentService {
  id                  String   @id @default(uuid())
  appointment_id      String
  location_service_id String
  price               Float
  duration            Int?
  notes               String?
  created_at          DateTime @default(now())

  appointment     Appointment     @relation(fields: [appointment_id], references: [id])
  locationService LocationService @relation(fields: [location_service_id], references: [id])
}

model StaffSchedule {
  id           String  @id @default(uuid())
  staff_id     String
  location_id  String
  day_of_week  Int
  start_time   String
  end_time     String
  is_available Boolean

  staff    Staff    @relation(fields: [staff_id], references: [id])
  location Location @relation(fields: [location_id], references: [id])
}

model StaffSpecialAvailability {
  id           String   @id @default(uuid())
  staff_id     String
  location_id  String
  date         DateTime
  start_time   String?
  end_time     String?
  is_available Boolean
  note         String?
  month        Int?
  year         Int?
  staff        Staff    @relation(fields: [staff_id], references: [id])
  location     Location @relation(fields: [location_id], references: [id])
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
  completed
  no_show
}
